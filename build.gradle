buildscript {
    ext {
        springBootVersion = "1.3.0.RELEASE"
        springCloudVersion = "Brixton.M4"
        jyallRepoBase = "http://10.10.10.60:8081/nexus/content"
    }
    repositories {
        mavenLocal()
        maven { url "${jyallRepoBase}/groups/public" }
        maven { url "http://repo.spring.io/libs-release" }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:0.5.4.RELEASE"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    }
    configurations {
        compile.exclude module: "spring-boot-starter-tomcat"
    }
}

configurations.all {
    // Check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

apply plugin: "java"
apply plugin: "idea"
apply plugin: "maven-publish"
apply plugin: "spring-boot"
apply plugin: "io.spring.dependency-management"


// 发布的jar包及版本号
def releaseName = "fs-jygoods-common"
def releaseVersion = "0.0.1-SNAPSHOT"

jar {
    baseName = releaseName
    version = releaseVersion
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenLocal()
    maven { url "${jyallRepoBase}/groups/public" }
    maven { url "http://repo.spring.io/libs-release" }
    maven { url "http://repo.spring.io/libs-milestone" }
    jcenter()
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-starter-parent:${springCloudVersion}"
    }
}


task releaseJar(type: Jar) {
    baseName releaseName
    from sourceSets.main.output
    exclude "**/demo/**", "**/*.yml", "**/*.xml", "**/*.sql"
    manifest {
        attributes(
                "Created-By": "${System.getProperty('java.version')} (${System.getProperty('java.specification.vendor')})",
                "Implementation-Version": releaseVersion
        )
    }
}

// 源码包
task releaseSourcesJar(type: Jar) {
    classifier "sources"
    baseName releaseName
    from sourceSets.main.allJava
    exclude "**/demo/**", "**/*.yml", "**/*.xml", "**/*.sql"
    manifest {
        attributes(
                "Created-By": "${System.getProperty('java.version')} (${System.getProperty('java.specification.vendor')})",
                "Implementation-Version": releaseVersion
        )
    }
}

// 发布JAR包
publishing {
    publications {
        maven(MavenPublication) {
            groupId "com.jyall"
            artifactId releaseName
            version releaseVersion
            from components.java
            artifacts.clear()

            artifacts = [releaseJar]
        }

        all {
            pom.withXml {
                asNode().dependencies."*".findAll() {
                    it.scope.text() == "runtime" && project.configurations.compile.allDependencies.find { dep ->
                        dep.name == it.artifactId.text()
                    }
                }.each {
                    it.scope*.value = "compile"
                }
            }
        }
    }

    repositories {
        maven {
            url "${jyallRepoBase}/repositories/jsjy-${releaseVersion.endsWith('-SNAPSHOT') ? 'snapshot' : 'release'}"
            credentials {
                username = "deploy"
                password = "eBbef58C"
            }
        }
    }
}

springBoot {
    requiresUnpack = ['org.springframework.boot:spring-boot-starter-jersey', 'com.wordnik:swagger-jersey2-jaxrs_2.10']
}

dependencies {
    //springframework
    compile "org.springframework.boot:spring-boot-starter"
}

eclipse {
    classpath {
        containers.remove("org.eclipse.jdt.launching.JRE_CONTAINER")
        containers "org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8"
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = "2.9"
}